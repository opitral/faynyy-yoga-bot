import asyncio
import logging

from aiogram import Router, F
from aiogram.enums import ChatAction, ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, CallbackQuery

from application.database import UserDatabase
from application.keyboards import START_KB, WantInGroupCbData, RETURN_TO_START_KB, BackToStartCbData, \
    WantIndividuallyCbData, WANT_INDIVIDUALLY_KB, StartPracticeCbData, SUBSCRIBE_KB, START_PRACTICE_KB, REMEMBER_KB
from application.settings import settings

router = Router()


@router.message(CommandStart())
async def start_command_handler(message: Message, db: UserDatabase):
    if not db.get_user(message.from_user.id):
        db.add_user(
            telegram_id=message.from_user.id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username
        )
        logging.info("New user added: %s", message.from_user.id)
    await message.answer_photo(FSInputFile("resources/media/start_photo.jpg"), caption="‚ö°Ô∏è–¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –æ—Ç—Ä–∏–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç–æ-–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –æ–ø–æ—Ä–Ω–æ-—Ä—É—Ö–æ–≤–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É —Ç–∞ –∑–Ω—è—Ç—Ç—è –±–ª–æ–∫—ñ–≤ —Ç–∞ –∑–∞—Ç–∏—Å–∫—ñ–≤ –≤ —Ç–∞–∑—É", show_caption_above_media=True, reply_markup=START_KB)

@router.callback_query(BackToStartCbData.filter())
async def back_to_start_callback_handler(callback: CallbackQuery):
    await callback.message.answer_photo(FSInputFile("resources/media/start_photo.jpg"), caption="‚ö°Ô∏è–¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –æ—Ç—Ä–∏–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞—Ç–æ-–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –æ–ø–æ—Ä–Ω–æ-—Ä—É—Ö–æ–≤–æ–≥–æ –∞–ø–∞—Ä–∞—Ç—É —Ç–∞ –∑–Ω—è—Ç—Ç—è –±–ª–æ–∫—ñ–≤ —Ç–∞ –∑–∞—Ç–∏—Å–∫—ñ–≤ –≤ —Ç–∞–∑—É", show_caption_above_media=True, reply_markup=START_KB)
    await callback.answer()

@router.callback_query(WantInGroupCbData.filter())
async def want_in_group_callback_handler(callback: CallbackQuery, db: UserDatabase):
    user = db.get_user(callback.from_user.id)
    if not user["wants_group"]:
        db.update_user_field(callback.from_user.id, "wants_group", 1)
    await callback.message.answer("ü¶æ*–ù–∞–±—ñ—Ä –≤ –æ–Ω–ª–∞–π–Ω ¬´–º—ñ–Ω—ñ-–≥—Ä—É–ø—É¬ª –ø–æ –π–æ–∑—ñ*\n\n‚ö°Ô∏è*–®–≤–∏–¥–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –ø–æ–ª—ñ –≤–º–æ—Ç–∏–≤–æ–≤–∞–Ω–∏—Ö –ª—ñ–¥–µ—Ä—ñ–≤*\nüì≤*–§–æ—Ä–º–∞—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω—å, –¥–µ –≤—Å—è –º–æ—è —É–≤–∞–≥–∞ –Ω–∞ –≤–∞—à–∏—Ö –∫–æ—Ä–µ–∫—Ü—ñ—è—Ö –∞—Å–∞–Ω —Ç–∞ —Ç–µ—Ö–Ω—ñ—Ü—ñ*\n‚ö°Ô∏è*–í—Å—å–æ–≥–æ 5 –º—ñ—Å—Ü—å. –ó–Ω–∞–π–¥–µ–º–æ –¥–ª—è —Ç–µ–±–µ - –ø–∏—à–∏ @faynyy*\n\n–©–æ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à?üëáüèª\n‚úîÔ∏è–ù–∞–ª–∞–≥–æ–¥–∏—à —Ä–∞–Ω–∫–æ–≤—ñ –ø—ñ–¥–π–æ–º–∏ –±–µ–∑ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ \n‚úîÔ∏è–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –≤—ñ–¥ —Å—Ç—Ä–µ—Å—É —Ç–∞ —Ç—Ä–∏–≤–æ–∂–Ω–æ—Å—Ç—ñ\n‚úîÔ∏è–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–Ω—É\n‚úîÔ∏è–ü–æ–∑–±–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ–ª–µ–π –≤ —à–∏—ó, —Å–ø–∏–Ω—ñ —Ç–∞ –ø–æ–ø–µ—Ä–µ–∫—É\n‚úîÔ∏è–ö–æ—Ä–µ–∫—Ü—ñ—è —Ñ—ñ–≥—É—Ä–∏ —Ç–∞ —Å—Ö—É–¥–Ω–µ–Ω–Ω—è \n‚úîÔ∏è–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó —É–≤–∞–≥–∏ —Ç–∞ –ø–∞–º º—è—Ç—ñ\n\n*–¶—ñ–Ω–∞ –∑–∞—Ä–∞–∑  - 350 –≥—Ä–Ω/–∑–∞–Ω—è—Ç—Ç—è*\n‚§µÔ∏è –ú—ñ—Å—è—á–Ω–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç\n*–Ω–∞ 8 –∑–∞–Ω—è—Ç—å: –≤—Å—å–æ–≥–æ 2800 –≥—Ä–Ω.*", reply_markup=RETURN_TO_START_KB, parse_mode=ParseMode.MARKDOWN)
    await callback.answer()

@router.callback_query(WantIndividuallyCbData.filter())
async def want_individually_callback_handler(callback: CallbackQuery, db: UserDatabase):
    user = db.get_user(callback.from_user.id)
    if not user["wants_individually"]:
        db.update_user_field(callback.from_user.id, "wants_individually", 1)
    await callback.message.answer("üì≤–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –≥–ª–∏–±–æ–∫–æ—ó —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó (–∑–∞–π–º–∞—î 1 —Ö–≤)", reply_markup=WANT_INDIVIDUALLY_KB)
    await callback.answer()

@router.callback_query(StartPracticeCbData.filter())
async def start_practice_callback_handler(callback: CallbackQuery, db: UserDatabase):
    user = db.get_user(callback.from_user.id)
    await callback.answer()
    if not user["started_practice"]:
        await callback.message.answer("‚ö°Ô∏è–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–µ–Ω–µ –≤ inst —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–¥–æ—Ä–æ–≤–µ —Ç—ñ–ª–æ —Ç–∞ –ø—Å–∏—Ö—ñ–∫—É –∑–∞ 30 —Ö–≤ –≤–¥–æ–º–∞",
                                      reply_markup=SUBSCRIBE_KB)
        await callback.bot.send_chat_action(callback.message.chat.id, action=ChatAction.TYPING)
        await asyncio.sleep(10)
        await callback.message.answer("ü§ù–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –ø–æ–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏ –π –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–µ–æ")
        await callback.bot.send_chat_action(callback.message.chat.id, action=ChatAction.TYPING)
        await asyncio.sleep(10)
        db.update_user_field(callback.from_user.id, "started_practice", 1)

    await callback.message.answer("–ü–æ–ª–µ—Ç—ñ–ª–∏üöÄ", reply_markup=START_PRACTICE_KB)

    async def delayed_message():
        await asyncio.sleep(1800)
        await callback.message.answer("<i>–Ø —Å—É–ø—Ä–æ–≤–æ–¥–∂—É–≤–∞—Ç–∏–º—É —Ç–µ–±–µ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è, —Å–ª—ñ–¥–∫—É–π –∑–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏, —è–∫—ñ –º–æ—Ç–∏–≤—É—é—Ç—å –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏‚ö°Ô∏è</i>\n\n–•–æ—á–µ—à —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ —Å–≤–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –∑–∞—Å–ø–æ–∫–æ—ó—Ç–∏ –ø—Å–∏—Ö—ñ–∫—É —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–¥–æ—Ä–æ–≤–µ —Ç—ñ–ª–æüëáüèª", parse_mode=ParseMode.HTML, reply_markup=REMEMBER_KB)

    asyncio.create_task(delayed_message())


@router.message(Command("export"), F.from_user.id.in_(settings.ADMINS_TELEGRAM_ID))
async def export_command_handler(message: Message, db: UserDatabase):
    await message.answer("–ï–∫—Å–ø–æ—Ä—Ç—É—é –±–∞–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É xlsx...")
    file_path = db.export_to_xlsx()
    logging.info("Exported user database to %s", file_path)
    await message.answer_document(FSInputFile(file_path), caption="–ë–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")


@router.message()
async def unknown_commands_handler(message: Message):
    await message.answer("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
